var docs = [{source:"core.js", description:"Chain Namespace ", type:"Namespace", aliases:["jQuery.Chain"]}, {source:"core.js", description:"Version Number ", type:"String", aliases:["jQuery.Chain.version"]}, {source:"core.js", description:"Tag for use in @jQuery.Chain.parse@ (which is used in CustomUpdater). It is can be altered. ", type:"Array", see:["jQuery.Chain.parse"], aliases:["jQuery.Chain.tags"]}, {source:"core.js", description:"Namespace containing all defined services. ", type:"Namespace", aliases:["jQuery.Chain.services"]}, {source:"core.js", description:"Register a service to the service manager. ", parameters:[{types:["String"], description:"Service Name", name:"name"}, {types:["Object"], description:"Service Object Prototype ", name:"proto"}], type:"Method", see:["jQuery.Chain.extend"], examples:[{title:"Create a Custom Service", code:"$.Chain.service('test', {\n\t\t// Default command handler\n\t\thandler: function(option)\n\t\t{\n\t\t\t// do something\n\t\t},\n\t\t// $(selector).test('what', somearg)\n\t\t$what: function(somearg)\n\t\t{\n\t\t\t// do something\n\t\t}\n});\n\n$('#element').test();\n"}], aliases:["jQuery.Chain.service"]}, {source:"core.js", description:"Extends service functionalities. ", parameters:[{types:["String"], description:"Service Name", name:"name"}, {types:["Object"], description:"Service Object Prototype ", name:"proto"}], type:"Method", see:["jQuery.Chain.service"], aliases:["jQuery.Chain.extend"]}, {source:"core.js", description:"Check whether it is a jQuery Object ", parameters:[{types:["Object"], description:"Object to be checked ", name:"obj"}], type:"Method", 'return':{types:["Boolean"], description:"True or False "}, see:["jQuery.Chain.jindentic"], examples:[{title:"Using @jobject@", code:"$.Chain.jobject($()) // returns true\n$.Chain.jobject(\"test\") // returns false\n"}], aliases:["jQuery.Chain.jobject"]}, {source:"core.js", description:"Check whether two jQuery Collection identic ", parameters:[{types:["Object"], description:"jQuery Object", name:"j1"}, {types:["Object"], description:"jQuery Object ", name:"j2"}], type:"Method", 'return':{types:["Boolean"], description:"True or False "}, see:["jQuery.Chain.jobject"], examples:[{title:"Using @jidentic@", code:"a = $('div');\nb = $('div');\nc = $('div.test');\n\n(a == b) //returns false\n\n$.Chain.jidentic(a, b) // returns true\n$.Chain.jidentic(a, c) // returns false\n"}], aliases:["jQuery.Chain.jidentic"]}, {source:"core.js", description:"Parse string contained @{something}@ to a Function that when executed replace those with the data it refers to. You can change the @{}@ tag by modifying @jQuery.Chain.tag@ ", parameters:[{types:["String"], description:"String ", name:"text"}], type:"Method", 'return':{types:["Function"], description:"template string. "}, see:["jQuery.Chain.tag"], examples:[{title:"Using @", code:"var fn = $.Chain.parse(\"My name is {first} {last}\");\nfn({first:'Rizqi', last:'Ahmad'}) // returns \"My name is Rizqi Ahmad\"\n"}]}, {source:"update.js", description:"Chain Update Service ", type:"Method", aliases:["update"]}, {source:"update.js", description:"Chain Update Service Object - Providing methods of @update@. All method listed here can only be used internally using @jQuery.Chain.service@ or @jQuery.Chain.extend@ ", type:"Namespace", see:["jQuery.Chain.service"], aliases:["jQuery.Chain.services.update"]}, {source:"update.js", description:"Default Handler ", type:"Method", see:["jQuery.Chain.service"], aliases:["jQuery.Chain.services.update.handler"]}, {source:"update.js", description:"If you pass a function to update, it will bind it to the update event. just like jQuerys @click()@ or @mouseover()@. ", parameters:[{types:["Function"], description:"Listener ", name:"fn"}], type:"Method", 'return':{types:["Object"], description:"jQuery Object "}, see:["jQuery.Chain.services.update.handler"], examples:[{title:"", code:"// assuming #person is already chained\n$('#person').update(function{\n\t\talert($(this).item().name);\n});\n\n$('#person').item({name: 'Rizqi'})\n"}], aliases:["update(fn)", "jQuery.Chain.services.update.bind"]}, {source:"update.js", description:"If no argument or \"hard\" is passed, it will update the element and trigger the update event. ", parameters:[{types:["String"], description:"If 'hard', it will update each of items ", name:"opt"}], type:"Method", 'return':{types:["Object"], description:"jQuery Object "}, see:["jQuery.Chain.services.update.handler"], examples:[{title:"", code:"$('#person').update();\n"}], aliases:["update(opt)", "jQuery.Chain.services.update.trigger"]}, {source:"chain.js", description:"Chain Binding Service. Method to activate the chaining / element rendering service. ", type:"Method", aliases:["chain"]}, {source:"chain.js", description:"Chain Binding Service Object - Providing methods of @chain@. All method listed here can only be used internally using @jQuery.Chain.service@ or @jQuery.Chain.extend@ ", type:"Namespace", see:["jQuery.Chain.service"], aliases:["jQuery.Chain.services.chain"]}, {source:"chain.js", description:"Initializer. Executed once at the first time @chain@ invoked. ", type:"Method", see:["jQuery.Chain.service"], aliases:["jQuery.Chain.services.chain.init"]}, {source:"chain.js", description:"Default handler. ", parameters:[{types:["Object"], description:"Object to be handled ", name:"obj"}], type:"Method", 'return':{types:["Object"], description:"jQuery Object "}, see:["jQuery.Chain.service"], aliases:["jQuery.Chain.services.chain.handler"]}, {source:"chain.js", description:"Updater Handler. If you pass an object to @chain@, it will treated as a updater object. The updater is a hash of selector and value string: like @chain({'my css selector': 'My Content String'})@ or @chain({'my css selector': {attributes}})@ ", parameters:[{types:["Object"], description:"Updater rules to be parsed ", name:"rules"}], type:"Method", examples:[{title:"Usage", code:"$(selector)\n\t\t.chain({\n\t\t\t// Items anchor, where the Item iteration should be placed\n\t\t\tanchor: anchor,\n\t\t\t// If true, the default updater is overridden\n\t\t\toverride: false, \n\t\t\t// Use custom builder\n\t\t\tbuilder: function(){},\n\t\t\t// Update the element self\n\t\t\tself: \"This is my {data}\",\n\t\t\t// Use css selector to update child element\n\t\t\t'.element.selector': \"Using String Updater\",\n\t\t\t// Use Function as updater\n\t\t\t'.element.selector': function(data, el){},\n\t\t\t// Updating Attributes\n\t\t\t'.element.selector': {\n\t\t\t\tattribute1: \"{attribute}\",\n\t\t\t\tclassName: \"{className}\",\n\t\t\t\tcontent: \"This is the {content}\",\n\t\t\t\tvalue: \"This is the {value}\"\n\t\t\t}\n\t\t});\n"}, {title:"Using Default Updater", code:"$('<div><span class=\"name\">Name</span></div>')\n\t\t.item({name: 'Steve Jobs'})\n\t\t.chain()\n\t\t.appendTo(document.body);\n"}, {title:"Using Custom Updater", code:"$('<div><div class=\"name\"><span class=\"first\">First</span> <span class=\"last\">Last</span></div></div>')\n\t\t.item({first:'Steve', last:'Jobs'})\n\t\t.chain({\n\t\t\t'.name .first': {\n\t\t\t\tstyle: 'color: blue;',\n\t\t\t\tcontent: 'First Name: {first}'\n\t\t\t},\n\t\t\t'.name .last': 'Family Name: {last}'\n\t\t})\n\t\t.appendTo(document.body);\n"}, {title:"Attach Builder Inside Updater", code:"$('<div><div class=\"name\">Name</div><div class=\"address\">Address</div></div>')\n\t\t.item({name:'Steve Jobs', address:'Cupertino'})\n\t\t.chain({\n\t\t\tbuilder: function(){\n\t\t\t\tvar data = this.item();\n\t\t\t\tthis.find('.name').click(function(){alert(data.name)});\n\t\t\t\tthis.find('.address').mouseout(function(){alert(data.address)});\n\t\t\t},\n\t\t\t'.name': '{name}',\n\t\t\t'.address': '{address}'\n\t\t})\n\t\t.appendTo(document.body);"}], aliases:["chain(updater)", "jQuery.Chain.services.chain.handleUpdater"]}, {source:"chain.js", description:"Builder Handler. If you pass a function to @chain@, it will be handled  as @{builder: function}@, enabling you to use the default updater while customizing the events etc. ", parameters:[{types:["Function"], description:"Builder Function ", name:"fn"}], type:"Method", see:["jQuery.Chain.services.chain.handleUpdater"], examples:[{title:"", code:"$('<div><div class=\"name\">Name</div><div class=\"address\">Address</div></div>')\n\t\t.item({name:'Steve Jobs', address:'Cupertino'})\n\t\t.chain(function(){\n\t\t\tthis.bind('click', function(){\n\t\t\t\tvar data = this.item();\n\t\t\t\talert('name:'+data.name+', address:'+data.address);\n\t\t\t});\n\t\t\t\n\t\t\t// if you return false, default builder wont be executed\n\t\t\t// You don't have to return true;\n\t\t\treturn true;\n\t\t})\n\t\t.appendTo(document.body);\n"}], aliases:["chain(fn)", "jQuery.Chain.services.chain.handleBuilder"]}, {source:"chain.js", description:"Default Builder - Automatic Data filler ", parameters:[{types:["Function"], description:"Builder Function", name:"builder"}, {types:["Object"], description:"Root Element Object ", name:"root"}], type:"Method", see:["jQuery.Chain.services.chain.createBuilder"], aliases:["jQuery.Chain.services.chain.defaultBuilder"]}, {source:"chain.js", description:"Builder Generator (Wrapper). ", parameters:[{types:["Function"], description:"Builder ", name:"builder"}], type:"Method", 'return':{types:["Function"], description:"Wrapped Builder "}, see:["jQuery.Chain.services.chain.defaultBuilder;"], aliases:["jQuery.Chain.services.chain.createBuilder"]}, {source:"chain.js", description:"Set Anchor (Container for @items@ to be populated, default: @this.element@) ", parameters:[{types:["Object"], description:"Anchor element ", name:"anchor"}], type:"Method", see:["jQuery.Chain.services.chain.$anchor"], aliases:["jQuery.Chain.services.chain.setAnchor"]}, {source:"chain.js", description:"Set new Anchor and rerender if new anchor passed. Otherwise return current anchor.  If you use @items()@ with @chain()@, you can use @chain('anchor', selector)@ to move the element, where the items will be generated. ", parameters:[{types:["Object"], description:"Anchor element or selector ", name:"anchor"}], type:"Method", 'return':{types:["Object"], description:"current element (if new Anchor passed), otherwise current anchor "}, examples:[{title:"", code:"$('#persons').chain('anchor', '.wrapper');\n\n// Define Anchor directly while building\n$('#persons').items([...]).chain({anchor:'.wrapper', builder: ...});"}], aliases:["chain('anchor')", "jQuery.Chain.services.chain.$anchor"]}, {source:"chain.js", description:"Getting/Switching Template. ", parameters:[{types:["Number", "String"], description:"Argument ", name:"arg"}], type:"Method", 'return':{types:["Object"], description:"jQuery Object "}, examples:[{title:"", code:"$(selector).chain('template') // Returns current Template (jQuery Object)\n$(selector).chain('template', 'raw') // Returns raw HTML Templates (all)\n$(selector).chain('template', nr) // Switch to template nr (read: Number)\n$(selector).chain('template', '.tree-column') // Switch by selector"}], aliases:["chain('template')", "jQuery.Chain.services.chain.$template"]}, {source:"chain.js", description:"Get/Change Builder. If you don't pass any argument, it will return the created builder. ", parameters:[{types:["Function", "Object"], description:"(Optional) ", name:"builder"}], type:"Method", 'return':{types:["Function", "Object"], description:"returns builder function, or jQuery Object depends on arg "}, examples:[{title:"", code:"$('#el').chain('builder') // returns builder function\n$('#el').chain('builder', newBuilder) // Replace Builder"}], aliases:["chain('builder')", "jQuery.Chain.services.chain.$builder"]}, {source:"chain.js", description:"Check status ", type:"Method", 'return':{types:["Boolean"], description:"true if active"}, aliases:["chain('active')", "jQuery.Chain.services.chain.$active"]}, {source:"chain.js", description:"Add/Remove Plugins that extend builder ", parameters:[{types:["String"], description:"Plugin Name", name:"name"}, {types:["Function", "Boolean"], description:"Plugin Function / False to remove ", name:"fn"}], type:"Method", 'return':{types:["Object"], description:"jQuery Object"}, aliases:["chain('plugin')", "jQuery.Chain.services.chain.$plugin"]}, {source:"chain.js", description:"Clone Element unchained, with ID removed. ", type:"Method", 'return':{types:["Object"], description:"jQuery Object containing cloned Element"}, aliases:["chain('clone')", "jQuery.Chain.services.chain.$clone"]}, {source:"chain.js", description:"Destroy Chain, restore Element to previous condition. ", parameters:[{types:["Boolean"], description:"If true, it won't destroy nested chain elements ", name:"nofollow"}], type:"Method", 'return':{types:["Object"], description:"jQuery Object"}, aliases:["chain('destroy')", "jQuery.Chain.services.chain.$destroy"]}, {source:"item.js", description:"Chain Item Service. Method to bind item to object. ", type:"Method", aliases:["item"]}, {source:"item.js", description:"Chain Item Manager - Providing methods of @item@. All method listed here can only be used internally using @jQuery.Chain.service@ or @jQuery.Chain.extend@ ", type:"Namespace", see:["jQuery.Chain.service"], aliases:["jQuery.Chain.services.item"]}, {source:"item.js", description:"Initializer. Executed once at the first time @item@ invoked. ", type:"Method", see:["jQuery.Chain.service"], aliases:["jQuery.Chain.services.item.init"]}, {source:"item.js", description:"Default handler. ", parameters:[{types:["Object"], description:"Object to be handled ", name:"obj"}], type:"Method", 'return':{types:["Object"], description:"jQuery Object "}, see:["jQuery.Chain.service"], aliases:["jQuery.Chain.services.item.handler"]}, {source:"item.js", description:"Edit/Bind Item. If no Object defined, it will bind the object to the Item, otherwise it will alter the object using the provided object. ", parameters:[{types:["Object"], description:"Object to be inserted ", name:"obj"}], type:"Method", 'return':{types:["Object"], description:"jQuery Object "}, see:["jQuery.Chain.services.item.handler"], examples:[{title:"", code:"$('#element').item({name:'Rizqi', country:'Germany'});\n$('#element').item({country:'Indonesia'});\n$('#element').item(); // Returns {name:'Rizqi', country:'Indonesia'}\n"}], aliases:["item(object)", "jQuery.Chain.services.item.handleObject"]}, {source:"item.js", description:"Add setter and getter to item. This function will change the way @item(object)@ and @item()@ works. ", parameters:[{types:["Function"], description:"Getter&Setter Function ", name:"fn"}], type:"Method", 'return':{types:["Object"], description:"jQuery Object "}, examples:[{title:"", code:"$(element).item(function(oldval, newval){\n\t\t//setter\n\t\tif(newval)\n\t\t\treturn $.extend(oldval, newval);\n\t\t//getter\n\telse\n\t\t\treturn oldval;\n})"}], aliases:["item(fn)", "jQuery.Chain.services.item.handleFunction"]}, {source:"item.js", description:"Get Data if no argument passed. ", type:"Method", 'return':{types:["Object", "Boolean"], description:"Returns Data Object if exist, otherwise false"}, aliases:["item()", "jQuery.Chain.services.item.handleDefault"]}, {source:"item.js", description:"Data Getter Wrapper Function ", type:"Method", 'return':{types:["Object"], description:"data"}, aliases:["jQuery.Chain.services.item.getData"]}, {source:"item.js", description:"Data Setter Wrapper Function ", type:"Method", aliases:["jQuery.Chain.services.item.setData"]}, {source:"item.js", description:"Default Getter/Setter ", parameters:[{types:["Object"], description:"Old value", name:"oldval"}, {types:["Object"], description:"New Value ", name:"newval"}], type:"Method", 'return':{types:["Object"], description:"returns data value"}, aliases:["jQuery.Chain.services.item.dataHandler"]}, {source:"item.js", description:"Update element. Wrapper for @jQuery.Chain.services.item.element.update@ ", type:"Method", 'return':{types:["Object"], description:"jQuery Object"}, aliases:["jQuery.Chain.services.item.update"]}, {source:"item.js", description:"Build item, apply builder and plugins ", type:"Method", see:["jQuery.Chain.services.item.$update"], aliases:["jQuery.Chain.services.item.build"]}, {source:"item.js", description:"Item Updater, called within @$(element).update()@ ", type:"Method", 'return':{types:["Object"], description:"jQuery Object"}, aliases:["item('update')", "jQuery.Chain.services.item.$update"]}, {source:"item.js", description:"Replace Data with new data ", parameters:[{types:["Object"], description:"Data Object ", name:"obj"}], type:"Method", 'return':{types:["Object"], description:"jQuery Object "}, examples:[{title:"", code:"$(element).item('replace', data);"}], aliases:["item('replace')", "jQuery.Chain.services.item.$replace"]}, {source:"item.js", description:"Remove Item And destroy it. ", parameters:[{types:["Boolean"], description:"If true it won't update the root element", name:"noupdate"}], type:"Method", aliases:["item('remove')", "jQuery.Chain.services.item.$remove"]}, {source:"item.js", description:"Check Status of @item@ ", type:"Method", 'return':{types:["Boolean"], description:"Status"}, aliases:["item('active')", "jQuery.Chain.services.item.$active"]}, {source:"item.js", description:"Get/Set Root element. ", parameters:[{types:["Object"], description:"New Root element ", name:"root"}], type:"Method", 'return':{types:["Object"], description:"If a new root passed, it will be item Element. Otherwise current root."}, aliases:["item('root');", "jQuery.Chain.services.item.$root"]}, {source:"item.js", description:"Backup Item to the state before being built. ", type:"Method", 'return':{types:["Object"], description:"jQuery Object"}, aliases:["item('backup')", "jQuery.Chain.services.item.$backup"]}, {source:"item.js", description:"Bind Item to other (chained) element. If one of them is updated, the linked element will be updated. ", parameters:[{types:["Object"], description:"element/selector to be linked with", name:"element"}, {types:["String"], description:"Collection to be linked with (has to be @\"self\"@ if linked to item) ", name:"collection"}], type:"Method", 'return':{types:["Object"], description:"jQuery Element "}, see:["jQuery.Chain.services.items.collection"], aliases:["item('link')", "jQuery.Chain.services.item.$link"]}, {source:"item.js", description:"Destroy item service. ", type:"Method", 'return':{types:["Object"], description:"jQuery Element"}, aliases:["item('destroy')", "jQuery.Chain.services.item.$destroy"]}, {source:"items.js", description:"Chain Items Service. Method to bind items to object. ", type:"Method", aliases:["items"]}, {source:"items.js", description:"Chain Items Manager - Providing methods of @items@. All method listed here can only be used internally using @jQuery.Chain.service@ or @jQuery.Chain.extend@ ", type:"Namespace", see:["jQuery.Chain.service"], aliases:["jQuery.Chain.services.items"]}, {source:"items.js", description:"Collection of Function for getting items ", type:"Namespace", see:["jQuery.Chain.services.items.collection"], aliases:["jQuery.Chain.services.items.collections"]}, {source:"items.js", description:"Get all items, including hidden ", type:"Method", 'return':{types:["Object"], description:"jQuery Object containing items"}, aliases:["jQuery.Chain.services.items.collections.all"]}, {source:"items.js", description:"Get all visible items ", type:"Method", 'return':{types:["Object"], description:"jQuery Object containing items"}, aliases:["jQuery.Chain.services.items.collections.visible"]}, {source:"items.js", description:"Get all hidden items ", type:"Method", 'return':{types:["Object"], description:"jQuery Object containing items"}, aliases:["jQuery.Chain.services.items.collections.hidden"]}, {source:"items.js", description:"Get self ", type:"Method", 'return':{types:["Object"], description:"jQuery Object of the element"}, aliases:["jQuery.Chain.services.items.collections.self"]}, {source:"items.js", description:"Initializer. Executed once at the first time @items@ invoked. ", type:"Method", see:["jQuery.Chain.service"], aliases:["jQuery.Chain.services.items.init"]}, {source:"items.js", description:"Default handler. ", parameters:[{types:["Object"], description:"Object to be handled ", name:"obj"}], type:"Method", 'return':{types:["Object"], description:"jQuery Object "}, see:["jQuery.Chain.service"], aliases:["jQuery.Chain.services.items.handler"]}, {source:"items.js", description:"If a Data Object is given, it will return the item element containing the object if it exists, otherwise empty. ", parameters:[{types:["Object"], description:"Data Object ", name:"obj"}], type:"Method", 'return':{types:["Object"], description:"jQuery Object"}, aliases:["items(object)", "jQuery.Chain.services.items.handleObject"]}, {source:"items.js", description:"If a jQuery Element is given, it will return itself if it is part of the items, otherwise empty jQuery object. ", parameters:[{types:["Object"], description:"jQuery Object ", name:"obj"}], type:"Method", 'return':{types:["Object"], description:"jQuery Object"}, aliases:["items(element)", "jQuery.Chain.services.items.handleElement"]}, {source:"items.js", description:"If array is given, it will merge it to current items ", parameters:[{types:["Array"], description:"Array of Data ", name:"array"}], type:"Method", 'return':{types:["Object"], description:"jQuery Object"}, aliases:["items(array)", "jQuery.Chain.services.items.handleArray"]}, {source:"items.js", description:"If number is given, it will get the object with the current number. Use -1 to get the last number. ", parameters:[{types:["Number"], description:"Index ", name:"number"}], type:"Method", 'return':{types:["Object"], description:"jQuery Object"}, aliases:["items(number)", "jQuery.Chain.services.items.handleNumber"]}, {source:"items.js", description:"If @true@ is given, it will get all items including the hidden one. ", type:"Method", 'return':{types:["Object"], description:"jQuery Object "}, see:["jQuery.Chain.services.items.collections.all"], aliases:["items(true)", "jQuery.Chain.services.items.handleTrue"]}, {source:"items.js", description:"If nothing is given, it will get all visible items. ", type:"Method", 'return':{types:["Object"], description:"jQuery Object "}, see:["jQuery.Chain.services.items.collections.visible"], aliases:["items(true)", "jQuery.Chain.services.items.handleTrue"]}, {source:"items.js", description:"Update element ", type:"Method", aliases:["jQuery.Chain.services.items.update"]}, {source:"items.js", description:"Clear all items ", type:"Method", aliases:["jQuery.Chain.services.items.empty"]}, {source:"items.js", description:"Get collection of items. Define a collection by adding a function argument ", parameters:[{types:["String"], description:"Collection name", name:"col"}, {types:["Function"], description:"Create a collection function ", name:"fn"}], type:"Method", 'return':{types:["Object"], description:"jQuery Object"}, aliases:["jQuery.Chain.services.items.collection"]}, {source:"items.js", description:"Items Updater, called by @$(element).update()@ ", type:"Method", 'return':{types:["Object"], description:"jQuery Element"}, aliases:["items('update')", "jQuery.Chain.services.items.$update"]}, {source:"items.js", description:"Add item(s). use @items('add', 'shift', item)@ to add item at the top ", parameters:[{types:["Object"], description:"", name:"item"}], type:"Method", 'return':{types:["Object"], description:"jQuery Object"}, aliases:["items('add')", "jQuery.Chain.services.items.$add"]}, {source:"items.js", description:"Merge items with array of item data ", parameters:[{types:["String"], description:"Switch for push/shift", name:"cmd"}, {types:["Array"], description:"Item Data ", name:"items"}], type:"Method", 'return':{types:["Object"], description:"jQuery Element"}, aliases:["items('merge')", "jQuery.Chain.services.items.$merge"]}, {source:"items.js", description:"Replace items with new items array ", parameters:[{types:["String"], description:"Switch for push/shift", name:"cmd"}, {types:["Array"], description:"Item Data ", name:"items"}], type:"Method", 'return':{types:["Object"], description:"jQuery Element"}, aliases:["items('replace')", "jQuery.Chain.services.items.$replace"]}, {source:"items.js", description:"Remove item ", parameters:[{types:["Object", "Number"], description:"", name:"item"}], type:"Method", 'return':{types:["Object"], description:"jQuery Object"}, aliases:["items('remove')", "jQuery.Chain.services.items.$remove"]}, {source:"items.js", description:"Reorder Item ", parameters:[{types:["Object"], description:"Item 1", name:"item1"}, {types:["Object"], description:"Item 2 ", name:"item2"}], type:"Method", 'return':{types:["Object"], description:"jQuery object"}, aliases:["items('reorder')", "jQuery.Chain.services.items.$reorder"]}, {source:"items.js", description:"Clear all items ", type:"Method", 'return':{types:["Object"], description:"jQuery object"}, aliases:["items('empty')", "jQuery.Chain.services.items.$empty"]}, {source:"items.js", description:"Like @items()@ but returns array of data instead of the jQuery object. ", type:"Method", 'return':{types:["Array"], description:"list of data"}, aliases:["items('data')", "jQuery.Chain.services.items.$data"]}, {source:"items.js", description:"Bind Items to other (chained) element. If one of them is updated, the linked element will be updated. ", parameters:[{types:["Object"], description:"element/selector to be linked with", name:"element"}, {types:["String"], description:"Collection to be linked with (has to be @\"self\"@ if linked to item) ", name:"collection"}], type:"Method", 'return':{types:["Object"], description:"jQuery Element "}, see:["jQuery.Chain.services.items.collection"], aliases:["items('link')", "jQuery.Chain.services.items.$link"]}, {source:"items.js", description:"Get index of an Item ", parameters:[{types:["Object"], description:"", name:"item"}], type:"Method", 'return':{types:["Number"], description:"index"}, aliases:["items('index')", "jQuery.Chain.services.items.$index"]}, {source:"items.js", description:"Get collection of items. Define a collection by adding a function argument ", parameters:[{types:["String"], description:"Collection name", name:"col"}, {types:["Function"], description:"Create a collection function ", name:"fn"}], type:"Method", 'return':{types:["Object"], description:"jQuery Object"}, aliases:["items('collection')", "jQuery.Chain.services.items.$collection"]}, {source:"items.js", description:"Check Status of @items@ ", type:"Method", 'return':{types:["Boolean"], description:"Status"}, aliases:["items('active')", "jQuery.Chain.services.items.$active"]}, {source:"items.js", description:"Backup Item to the state before being built. ", type:"Method", 'return':{types:["Object"], description:"jQuery Object"}, aliases:["items('backup')", "jQuery.Chain.services.items.$backup"]}, {source:"items.js", description:"Destroy items service. ", type:"Method", 'return':{types:["Object"], description:"jQuery Element"}, aliases:["items('destroy')", "jQuery.Chain.services.items.$destroy"]}, {source:"items.js", description:"Filtering subroutine ", type:"Method", aliases:["jQuery.Chain.services.items.doFilter"]}, {source:"items.js", description:"Filter items by criteria. Filtered items will be hidden. ", parameters:[{types:["String", "RegExp"], description:"Search keyword", name:"text"}, {types:["String", "Array"], description:"Search properties ", name:"properties"}], type:"Method", 'return':{types:["Object"], description:"jQuery Object"}, aliases:["items('filter')", "jQuery.Chain.services.items.$filter"]}, {source:"items.js", description:"Sorting subroutine ", type:"Method", aliases:["jQuery.Chain.services.items.doSort"]}, {source:"items.js", description:"Sort items by property. ", parameters:[{types:["String"], description:"sorting property", name:"name"}, {types:["Object"], description:"{toggle:true/false, desc:true/false, type:'number/default'} ", name:"opt"}], type:"Method", 'return':{types:["Object"], description:"jQuery Object"}, aliases:["items('sort')", "jQuery.Chain.services.items.$sort"]}];